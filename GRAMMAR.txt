## Evaluation grammar for cfl

x ::= ( a | b | ... | z )
      ( a | b | ... | z
      | A | B | ... | Z
      | 0 | 1 | ... | 9
      | _ )* (')*

t ::= ( A | B | ... | Z )
      ( a | b | ... | z
      | A | B | ... | Z
      | 0 | 1 | ... | 9
      | _ )* (')*

c ::=   "(" c, c, ..., c ")"
      | _
      | x

v ::=   x
      | true | false
      | 0 | 1 | -1 | 2 | -2 | ...
      | function c -> e
      | [e, e, ..., e]
      | (e, e, ..., e)

e ::=   v
      | "(" e ")"
      | e && e | e "||" e | !e
      | e "+" e | e "*" e | e / e
      | e == e | e < e
      | e e
      | if e then e else e
      | let rec x c = e in e
      | e : e | e ++ e
      | case e of [] -> e "|" (c : x) -> e

## Parseable grammar for cfl

x ::= ( a | b | ... | z )
      ( a | b | ... | z
      | A | B | ... | Z
      | 0 | 1 | ... | 9
      | _ )* (')*

t ::= ( A | B | ... | Z )
      ( a | b | ... | z
      | A | B | ... | Z
      | 0 | 1 | ... | 9
      | _ )* (')*

c ::=   "(" c, c, ..., c ")"
      | _
      | x

a ::=   x
      | true | false
      | 0 | 1 | -1 | 2 | -2 | ...
      | !a
      | "(" e ")"
      | [e, e, ..., e]
      | (e, e, ..., e)

m ::=   a a
      | a

f ::=   m * f | m / f | m % f
      | m

r ::=   f + r | f - r
      | f

p ::=   r == r | r < r | r <= r | r > r | r >= r |
      | r

l ::=   p : l
      | p

g ::=   l ++ g |
      | l

b ::=   g "&&" b
      | g

n ::=   b "||" n
      | b

e ::=   function c -> e
      | if e then e else e
      | let c = e in e
      | let x c ... c = e in e
      | case e of [] -> e "|" (x : x) -> e
      | e $ e
      | r

s ::=   c = e
      | x c ... c = e

d ::=   s
      | s ; d

p ::=   d ; main = e
      | main = e
