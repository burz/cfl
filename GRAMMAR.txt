## Evaluation grammar for cfl

x ::= ( a | b | ... | z
      | A | B | ... | Z )
      ( a | b | ... | z
      | A | B | ... | Z
      | 0 | 1 | ... | 9
      | _ )* (')*

v ::=   x
      | true | false
      | 0 | 1 | -1 | 2 | -2 | ...
      | function x -> e
      | [v, v, ..., v]

e ::=   v
      | (e)
      | e && e | e "||" e | !e
      | e "+" e | e "*" e | e / e
      | e == e | e < e
      | e e
      | if e then e else e
      | let rec x x = e in e
      | e : e | e ++ e
      | case e of [] -> e "|" (x : x) -> e

## Parseable grammar for cfl

x ::= ( a | b | ... | z
      | A | B | ... | Z )
      ( a | b | ... | z
      | A | B | ... | Z
      | 0 | 1 | ... | 9
      | _ )* (')*

v ::=   x
      | true | false
      | 0 | 1 | -1 | 2 | -2 | ...
      | function x -> e
      | [v, v, ..., v]

e ::=   v
      | (e)
      | e && e | e "||" e | !e
      | e "+" e | e - e | e "*" e | e / e | e % e
      | e == e | e < e | e <= e | e > e | e >= e
      | e e
      | if e then e else e
      | let x x ... x = e in e
      | e : e | e ++ e
      | case e of [] -> e "|" (x : x) -> e
